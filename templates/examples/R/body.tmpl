{{top "Remote Persistent Memory"}}

<p>
We assume you already know what Persistent Memory (or PMem for short) is and hopefully
you have learned many possible ways of benefiting from using it in your applications.
In this example we want to introduce to you a basic way of accessing the very same
Persistent Memory but when it is installed in a remote system. Remote Persistent Memory
(or RPMem for short) is a way of doing this via a network by making use
of the Remote Direct Memory Access (RDMA) technology.

<p>
This example is an introduction to RPMem. We will guide you briefly through setting up
all required hardware and software components and verifying whether the connection
works properly. Having that, we will show you how to access Persistent Memory
on a remote system using the librpma library (where RPMA stands for
Remote Persistent Memory Access, makes sense right?).

<p>
After completing this example you will know:
<ul>
    <li>what is RPMem and what it is good for,</li>
    <li>how RPMem is different comparing to PMem,</li>
    <li>what hardware and software components are required to start using RPMem,</li>
    <li>how to verify whether the RDMA network works properly,</li>
    <li>how to use librpma API to:
        <ul>
            <li>establish a connection,</li>
            <li>prepare memory for remote manipulation,</li>
            <li>manipulate memory on the remote system,</li>
            <li>assure persistency of stores to the remote system.</li>
        </ul>
    </li>
</ul>

<p>
Step-by-step you will:
<ul>
    <li>test the connection on the basic level using ping,</li>
    <li>test the connection RDMA capabilities using rping,</li>
    <li>review an application focusing on establishing a connection,</li>
    <li>review an application reading remote system's memory and writing it back
        in the persistent manner.</li>
</ul>

{{step "Connectivity check"}}

<p>
In order to have a real RDMA network you have to have:
<ul>
    <li>two machines both equipped with RDMA-capable network adapters connected
        to each other,</li>
    <li>libibverbs and librdmacm libraries installed in both systems (or the rdma-core
        package containing both of them).</li>
</ul>

<p>
Alternatively, for development purposes, you can use a software-emulated RDMA network
interface (SoftRoCE) that can be set up using the following
<a href="https://github.com/ldorau/2021-04-21.web/blob/devel/scripts/config_softroce.sh" target="_blank">script</a>.

<p>
All used network interfaces should be configured, up and running with an IP address
assigned.

<p>
First, you will check the basic Ethernet network connectivity using the ping command
(see the <a href="https://linux.die.net/man/8/ping" target="_blank">ping(8)</a>
manual for details).

{{edit "run_test_ping.sh"}}

{{run "./run_test_ping.sh"}}

<p>
Next, you will check the RDMA connection with the RDMA ping-pong test using
the rping command (provided by the librdmacm-utils package).

<p>
The rping command establishes a reliable RDMA connection between two nodes using
librdmacm and optionally performs RDMA transfers between the nodes, then disconnects.
When rping works, you can be sure that the RDMA connection is correctly configured
and works well (see the
<a href="https://linux.die.net/man/1/rping" target="_blank">rping(1)</a>
manual for details).

{{edit "run_test_rping.sh"}}

{{run "./run_test_rping.sh"}}

{{step "Establishing a connection"}}

<p>
The Remote Persistent Memory Access library (librpma) is a C library to simplify accessing
PMem on remote systems over RDMA. For more information see
<a href="https://pmem.io/rpma/" target="_blank">pmem.io</a>.

<p>
<img src="/img/examples/{{.Ex}}/ecosystem.png" class="figure" style="width: 100%;">

<p>
Now you will implement both sides of an RDMA connection:
<ul>
    <li>a server that waits for incoming connections using a single endpoint (see the
        <a href="https://pmem.io/rpma/manpages/master/librpma.7.html#server-operation" target="_blank">server operation documentation</a>
        for details),</li>
    <li>a client which attempts to establish the connection to the server (see the
        <a href="https://pmem.io/rpma/manpages/master/librpma.7.html#client-operation" target="_blank">client operation documentation</a>
        for details).</li>
</ul>

<p>
These applications intentionally do only connection and disconnection to familiarize you
with these processes. Building on this you will do more in the next step.

{{edit "simple_client.c" "simple_server.c" "common.h" "common.c" "CMakeLists.txt" "build_simple.sh"}}

{{build "./build_simple.sh"}}

{{edit "run_simple.sh"}}

{{run "./run_simple.sh"}}

{{step "Remote Persistent Memory access"}}

<p>
Now you will read and write back RPMem's content in the persistent way using
the following librpma functions:
<ul>
    <li><code>rpma_read()</code> - initiates transferring (reading) data from the remote
        memory to the local memory (see the
        <a href="https://pmem.io/rpma/manpages/master/rpma_read.3" target="_blank">rpma_read(3)</a>
        manual for details),</li>
    <li><code>rpma_write()</code> - initiates transferring (writing) data from the local
        memory to the remote memory (see the
        <a href="https://pmem.io/rpma/manpages/master/rpma_write.3" target="_blank">rpma_write(3)</a>
        manual for details),</li>
    <li><code>rpma_flush()</code> - initiates finalizing a transfer of data to the remote
        memory, it flushes data down to the persistent domain (see the
        <a href="https://pmem.io/rpma/manpages/master/rpma_flush.3" target="_blank">rpma_flush(3)</a>
        manual for details).</li>
</ul>

<p>
In this example, after having established a connection (see the previous step for
details), the client reads (using <code>rpma_read()</code>) an initial content
of the server's memory (the string: "<i>The initial content of the server memory</i>"),
then it writes (using <code>rpma_write()</code>) the new message ("<i>Hello world!</i>")
to the server's memory and finally it flushes the just written data down
to the persistent domain.

<p>
Looking more deeply into the code it can be re-described in the following way:
<ul>
    <li>The server prepares a local persistent memory and exposes the memory description
        along with other parameters required to perform an RDMA read, write and flush
        operations. After the connection is established, the server waits for the client
        to disconnect.</li>
    <li>The client allocates memory from DRAM and registers it as a reading destination
        and writing source. After the connection is established the client receives
        the server's memory regions registered as a reading source and a writing
        destination. The client performs the RDMA read from the remote memory region
        to the local memory region, then it writes new data to the local memory region
        and performs the RDMA write from the local memory region to the remote memory
        region followed by the RPMA flush.</li>
</ul>

<p>
<b>Note #1:</b> The server requires a unique "user-id" argument in order to use
a different part of persistent memory that is shared by all the server instances
running on the same PMem device. The "user-id" argument is also used to pick
a unique TCP port.

<p>
<b>Note #2:</b> For the sake of this example, the memory region being written to and
the server's peer configuration are transferred via the connection's private
data. In general, it can be transferred via an out-of-band or the in-band
channel.

<p>
<b>Note #3:</b> This example uses exactly the same "common.h" and "common.c"
files copied from the previous step.

{{edit "client.c" "server.c" "common.h" "build_main.sh"}}

{{build "./build_main.sh"}}

{{edit "run_main.sh"}}

{{run "./run_main.sh"}}

{{summary}}

<p>
During this session, you have:
<ul>
    <li>checked the basic network connectivity,</li>
    <li>checked whether the network is RDMA-capable,</li>
    <li>established a connection using the librpma library,</li>
    <li>read and written back the RPMem's content in the persistent way.</li>
</ul>

<p>
Takeaways:
<ul>
    <li>Remote Persistent Memory (RPMem) is a way of accessing Persistent Memory when
        it is installed in a remote system,</li>
    <li>RPMem leverages RDMA capabilities to achieve e.g.:
        <ul>
            <li>zero-copy read of the contents of RPMem,</li>
            <li>single-sided persistency of the PMem's contents in a remote system,</li>
        </ul>
    </li>
    <li>RPMem is a way to seamlessly incorporate PMem into modern cloud architectures,</li>
    <li>the librpma library is a ready-to-use simple API incarnating RPMem principles.</li>
</ul>

<p>
If you want to learn more:
<ul>
    <li><a href="https://github.com/pmem/rpma" target="_blank">https://github.com/pmem/rpma</a>
        - where librpma is forged
        <ul>
            <li>We especially recommend getting familiar with
                <a href="https://github.com/pmem/rpma/tree/master/examples" target="_blank">examples</a>
                that allow you to learn other supported use-cases.</li>
        </ul>
    </li>
    <li><a href="https://pmem.io/rpma/" target="_blank">https://pmem.io/rpma/</a>
         - where you can find the librpma library manuals, configuration guidelines
           and performance reports.</li>
    <li>It may be also useful to read our whitepaper:
        <a href="https://www.intel.com/content/www/us/en/developer/articles/technical/persistent-memory-replication-over-traditional-rdma-part-1-understanding-remote-persistent.html" target="_blank">Persistent Memory Replication Over Traditional RDMA</a>.
        <ul>
            <li><b>Note</b> it describes RPMem in the context of the librpmem library
                (do not confuse with librpma) which is a completely different story.</li>
        </ul>
    </li>
</ul>

<p>
Thank you very much for your attention!

<p>
Yours sincerely<br/>
RPMem PMDK Squad

{{bottom}}
